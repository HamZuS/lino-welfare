.. _welfare.specs.misc:

=============
Miscellaneous
=============

.. How to test only this document:

    $ python setup.py test -s tests.SpecsTests.test_misc
    
    doctest init:
    
    >>> import os
    >>> from lino import startup
    >>> startup('lino_welfare.projects.std.settings.doctests')
    >>> from lino.api.doctest import *
    >>> ses = rt.login('rolf')


.. contents:: 
   :local:
   :depth: 3



Build all excerpts
===================

.. 

    Rendering some more excerpts

    These are the excerpts generated by the demo fixtures:

    >> with translation.override('en'):
    ...     ses.show(excerpts.Excerpts, column_names="id excerpt_type owner")

    >> import shutil
    >> obj = excerpts.Excerpt.objects.get(pk=26)
    >> rv = ses.run(obj.do_print)
    >> print(rv['open_url'])
    .. #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE +REPORT_UDIFF
    /media/cache/appypdf/isip.Contract-1.pdf
    >> print(rv['success'])
    True

    The above `.pdf` file has been generated to a temporary cache
    directory of the developer's computer when this document had its last
    test run. The following lines the copied the file to the docs tree
    which is published together with the source code and thus publicly
    visible:

    >> tmppath = settings.SITE.project_dir + rv['open_url']
    >> shutil.copyfile(tmppath, 'isip.Contract-1.pdf')

    Link to this copy of the resulting file:
    :srcref:`/docs/tested/isip.Contract-1.pdf`

    Now the same in more generic. We write a formatter function and then
    call it on every excerpt. See the source code of this page if you want
    to see how we generated the following list:


Editing the print template of an excerpt
========================================

Here we want to see what the :class:`EditTemplate
<lino.modlib.printing.mixins.EditTemplate>` action says, especially
when called on an excerpt where Lino has two possible locations.

Excerpts are printables with *two* template groups.  The first
template group is given by the owner (e.g. `"immersion/Contract"`) and
the second is just `"excerpts"`.

For example the owner of Excerpt #1 is an immersion training, while
the owner of Excerpt #4 is an aids confirmation:

>>> excerpts.Excerpt.objects.get(pk=1).get_template_groups()
[u'immersion/Contract', u'excerpts']
>>> excerpts.Excerpt.objects.get(pk=4).get_template_groups()
[u'aids/Confirmation', u'excerpts']

When creating a local copy of the factory template, Lino copies the
factory file to the directory given by the *first* group. Before doing
so, it will ask for user confirmation.

>>> lcd = os.path.join(settings.SITE.project_dir, 'config')
>>> # rt.makedirs_if_missing(lcd)
>>> obj = excerpts.Excerpt.objects.get(pk=2)
>>> obj.owner
Contract #2 ('Immersion training#2 (Daniel EMONTS)')

>>> ses.set_confirm_answer(False)
>>> rv = ses.run(obj.edit_template)
>>> print(rv['info_message'])
... #doctest: +NORMALIZE_WHITESPACE +ELLIPSIS
Gonna copy ...welfare/config/excerpts/Default.odt to $(PRJ)/config/immersion/Contract/Default.odt
>>> print(rv['message'])
...     #doctest: +NORMALIZE_WHITESPACE
Before you can edit this template we must create a local copy on the server. This will exclude the template from future updates.
Are you sure?

Another thing is the location of the factory template. 

>>> obj = excerpts.Excerpt.objects.get(pk=1)
>>> ses.set_confirm_answer(False)
>>> rv = ses.run(obj.edit_template)
>>> print(rv['info_message'])
... #doctest: +NORMALIZE_WHITESPACE +ELLIPSIS
Gonna copy ...lino_welfare/modlib/immersion/config/immersion/Contract/StageForem.odt to $(PRJ)/config/immersion/Contract/StageForem.odt


(Note: the above tests are the reason why `is_local_project_dir` is
`True` in `lino_welfare.projects.std.settings.doctests`.)



Yet another series of GET requests
==================================

>>> RetrieveTIGroupsRequest = rt.modules.cbss.RetrieveTIGroupsRequest
>>> ContentType = rt.modules.contenttypes.ContentType

>>> json_fields = 'count rows title success no_data_text'
>>> kw = dict(fmt='json', limit=10, start=0)
>>> demo_get('rolf', 'api/contacts/Companies', json_fields, 52, **kw)
>>> demo_get('rolf', 'api/households/Households', json_fields, 15, **kw)
>>> demo_get('rolf', 'api/contacts/Partners', json_fields, 175, **kw)

>>> demo_get('rolf', 'api/countries/Countries', json_fields, 9, **kw)
>>> demo_get('rolf', 'api/jobs/JobProviders', json_fields, 4, **kw)
>>> demo_get('rolf', 'api/jobs/Jobs', json_fields, 9, **kw)

>>> mt = ContentType.objects.get_for_model(RetrieveTIGroupsRequest).pk
>>> demo_get('rolf', 'api/cbss/RetrieveTIGroupsResult', 
...     json_fields, 18, mt=mt, mk=1, **kw)

>>> json_fields = 'count rows title success no_data_text param_values'
>>> demo_get('rolf', 'api/contacts/Persons', json_fields, 103, **kw)
>>> demo_get('rolf', 'api/pcsw/CoachedClients', json_fields, 30, **kw)
>>> demo_get('rolf', 'api/debts/Clients', json_fields, 0, **kw)
>>> demo_get('rolf', 'api/cal/MyEvents', json_fields, 13, **kw)
>>> demo_get('rolf', 'api/newcomers/NewClients', json_fields, 23, **kw)
>>> demo_get(
...    'rolf', 'api/newcomers/AvailableCoachesByClient', json_fields,
...    2, mt=50, mk=120, **kw)
>>> demo_get('alicia', 'api/integ/Clients', json_fields, 7, **kw)
>>> demo_get('hubert', 'api/integ/Clients', json_fields, 19, **kw)

>>> alicia = settings.SITE.user_model.objects.get(username='alicia')

Rolf working as Alicia:

>>> kw = dict(fmt='json', limit=20, start=0, su=alicia.pk)
>>> demo_get('rolf', 'api/integ/Clients', json_fields, 7, **kw)

Some choices lists:

>>> kw = dict()
>>> fields = 'count rows'
>>> demo_get(
...    'rolf', 'choices/pcsw/ContactsByClient/company?type=1', fields, 4, **kw)

>>> demo_get(
...    'rolf', 'choices/aids/IncomeConfirmations/aid_type', fields, 11, **kw)

>>> demo_get(
...    'rolf', 'choices/aids/RefundConfirmations/aid_type', fields, 11, **kw)

>>> demo_get(
...    'rolf', 'apchoices/pcsw/Clients/create_visit/user', fields, 4, **kw)

>>> demo_get(
...    'robin', 'choices/countries/Countries/actual_country', fields, 8, **kw)


Visibility of eID reader action
===============================

Here is a list of the tables that have the
:class:`lino.modlib.beid.mixins.FindByBeIdAction` and the user
profiles that can see it.

>>> from lino_xl.lib.beid.mixins import FindByBeIdAction
>>> print(analyzer.show_action_permissions(FindByBeIdAction))
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE +REPORT_UDIFF
- debts.Clients.find_by_beid : visible for 300 admin
- integ.Clients.find_by_beid : visible for 100 110 120 admin
- newcomers.ClientsByFaculty.find_by_beid : visible for 100 110 120 200 210 220 300 400 410 800 admin
- newcomers.NewClients.find_by_beid : visible for 200 300 admin
- pcsw.AllClients.find_by_beid : visible for 110 410 admin
- pcsw.Clients.find_by_beid : visible for 100 110 120 200 210 220 300 400 410 800 admin
- pcsw.ClientsByNationality.find_by_beid : visible for 100 110 120 200 210 220 300 400 410 800 admin
- pcsw.CoachedClients.find_by_beid : visible for 100 110 120 200 300 400 410 admin
- reception.Clients.find_by_beid : visible for 100 110 120 200 210 220 300 400 410 800 admin
<BLANKLINE>



Visibility of merge action
==========================

Here is a list of the tables that have the
:class:`lino.core.merge.MergeAction` and the user profiles that can
see it.



>>> from lino.core.merge import MergeAction
>>> print(analyzer.show_action_permissions(MergeAction))
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE +REPORT_UDIFF
- contacts.Companies.merge_row : visible for 110 210 220 410 800 admin
- countries.Places.merge_row : visible for 110 210 220 410 800 admin
- pcsw.Clients.merge_row : visible for 110 210 220 410 800 admin
<BLANKLINE>



Visibility of duplicate action
==============================

Here is a list of the tables that have the
:class:`lino.mixins.duplicable.Duplicate` and the user profiles that can
see it.


>>> from lino.mixins.duplicable import Duplicate
>>> print(analyzer.show_action_permissions(Duplicate))
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE +REPORT_UDIFF
- accounts.Accounts.duplicate : visible for 510 admin
- accounts.AccountsByGroup.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- cal.EventTypes.duplicate : visible for 110 410 admin
- cal.Events.duplicate : visible for 110 410 admin
- cal.EventsByClient.duplicate : visible for 100 110 120 200 300 400 410 500 510 admin
- cal.EventsByController.duplicate : visible for 100 110 120 200 300 400 410 500 510 admin
- cal.EventsByDay.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- cal.EventsByProject.duplicate : visible for 100 110 120 200 300 400 410 500 510 admin
- cal.EventsByRoom.duplicate : visible for 110 410 admin
- cal.EventsByType.duplicate : visible for 110 410 admin
- cal.MyAssignedEvents.duplicate : visible for 100 110 120 200 300 400 410 500 510 admin
- cal.MyEvents.duplicate : visible for 100 110 120 200 300 400 410 500 510 admin
- cal.MyEventsToday.duplicate : visible for 100 110 120 200 300 400 410 500 510 admin
- cal.OneEvent.duplicate : visible for 100 110 120 200 300 400 410 500 510 admin
- cal.OverdueAppointments.duplicate : visible for 110 410 admin
- cal.RemoteCalendars.duplicate : visible for 110 410 admin
- cbss.AllIdentifyPersonRequests.duplicate : visible for admin
- cbss.AllManageAccessRequests.duplicate : visible for admin
- cbss.AllRetrieveTIGroupsRequests.duplicate : visible for admin
- cbss.IdentifyPersonRequests.duplicate : visible for 100 110 120 200 210 220 300 400 410 admin
- cbss.IdentifyRequestsByPerson.duplicate : visible for 100 110 120 200 210 220 300 400 410 admin
- cbss.ManageAccessRequests.duplicate : visible for 100 110 120 200 210 220 300 400 410 admin
- cbss.ManageAccessRequestsByPerson.duplicate : visible for 100 110 120 200 210 220 300 400 410 admin
- cbss.MyIdentifyPersonRequests.duplicate : visible for 100 110 120 200 210 220 300 400 410 admin
- cbss.MyManageAccessRequests.duplicate : visible for 100 110 120 200 210 220 300 400 410 admin
- cbss.MyRetrieveTIGroupsRequests.duplicate : visible for 100 110 120 200 210 220 300 400 410 admin
- cbss.RetrieveTIGroupsRequests.duplicate : visible for 100 110 120 200 210 220 300 400 410 admin
- cbss.RetrieveTIGroupsRequestsByPerson.duplicate : visible for 100 110 120 200 210 220 300 400 410 admin
- countries.Places.duplicate : visible for 110 210 220 410 800 admin
- countries.PlacesByCountry.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- countries.PlacesByPlace.duplicate : visible for 110 210 220 410 800 admin
- cv.EducationLevels.duplicate : visible for 110 admin
- debts.Accounts.duplicate : visible for admin
- debts.AccountsByGroup.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- debts.Actors.duplicate : visible for admin
- debts.ActorsByBudget.duplicate : visible for 300 admin
- debts.ActorsByPartner.duplicate : visible for 300 admin
- debts.AssetsByBudget.duplicate : visible for 300 admin
- debts.Budgets.duplicate : visible for admin
- debts.BudgetsByPartner.duplicate : visible for 300 admin
- debts.DistByBudget.duplicate : visible for 300 admin
- debts.Entries.duplicate : visible for admin
- debts.EntriesByAccount.duplicate : visible for admin
- debts.EntriesByBudget.duplicate : visible for 300 admin
- debts.EntriesByType.duplicate : visible for 300 admin
- debts.ExpensesByBudget.duplicate : visible for 300 admin
- debts.IncomesByBudget.duplicate : visible for 300 admin
- debts.LiabilitiesByBudget.duplicate : visible for 300 admin
- debts.MyBudgets.duplicate : visible for 300 admin
- excerpts.AllExcerpts.duplicate : visible for admin
- excerpts.Excerpts.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- excerpts.ExcerptsByOwner.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- excerpts.ExcerptsByProject.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- excerpts.ExcerptsByType.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- excerpts.MyExcerpts.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- extensible.PanelEvents.duplicate : visible for 100 110 120 200 300 400 410 500 510 admin
- finan.BankStatementItemTable.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- finan.ItemsByBankStatement.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- finan.ItemsByDisbursementOrder.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- finan.ItemsByJournalEntry.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- finan.ItemsByPaymentOrder.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- finan.JournalEntryItemTable.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- finan.PaymentOrderItemTable.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- integ.CoachingEndingsByType.duplicate : visible for 110 410 admin
- integ.CoachingEndingsByUser.duplicate : visible for 110 410 admin
- isip.EventsByContract.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- jobs.JobTypes.duplicate : visible for 110 410 admin
- ledger.Journals.duplicate : visible for 510 admin
- newcomers.Competences.duplicate : visible for 110 410 admin
- newcomers.CompetencesByFaculty.duplicate : visible for 110 410 admin
- newcomers.CompetencesByUser.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- newcomers.MyCompetences.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- notes.AllNotes.duplicate : visible for 110 410 admin
- notes.MyNotes.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- notes.Notes.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- notes.NotesByCompany.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- notes.NotesByEventType.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- notes.NotesByOwner.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- notes.NotesByPerson.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- notes.NotesByProject.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- notes.NotesByType.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- notes.NotesByX.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- pcsw.CoachingEndings.duplicate : visible for 110 410 admin
- pcsw.DispenseReasons.duplicate : visible for 110 410 admin
- polls.Choices.duplicate : visible for 110 410 admin
- polls.ChoicesBySet.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- polls.PollResult.duplicate : visible for 110 410 admin
- polls.Questions.duplicate : visible for 110 410 admin
- polls.QuestionsByPoll.duplicate : visible for 100 110 120 200 300 400 410 admin
- vatless.InvoiceItems.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- vatless.ItemsByInvoice.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
- vatless.ItemsByProjectInvoice.duplicate : visible for 100 110 120 200 210 220 300 400 410 500 510 800 admin
<BLANKLINE>
