.. _welfare.tested.20150715:

====================================
Reception clerk sees "Career" tab
====================================

.. How to test only this document:

    $ python setup.py test -s tests.DocsTests.test_20150715
    
    doctest init:

    >>> from __future__ import print_function
    >>> from lino import startup
    >>> startup('lino_welfare.projects.std.settings.doctests')
    >>> from lino.utils.xmlgen.html import E
    >>> from lino.api.doctest import *
    >>> from lino.api import rt
    >>> from lino.utils.jsgen import with_user_profile

This document helped us to understand and solve ticket :ticket:`340`
(discovered :blogref:`20150714`).

The problem: A reception clerk in Eupen
(:mod:`lino_welfare.projects.eupen`) should not see the career tab of
a client, because the :attr:`required_roles
<lino.core.permissions.Permittable.required_roles>` of that panel
include :class:`IntegrationAgent
<lino_welfare.modlib.integ.roles.IntegrationAgent>`.  But they saw it
nevertheless:

.. image:: 20150715.png

A reception clerk is not an integration agent:

>>> from lino_welfare.modlib.welfare.roles import *
>>> isinstance(ReceptionClerk, IntegrationAgent)
False

>>> ia_profile = users.UserProfiles.get_by_value('100')
>>> print(ia_profile)
Integration agent

>>> rc_profile = users.UserProfiles.get_by_value('210')
>>> print(rc_profile)
Reception clerk


We are talking about the detail layout of a client, defined by
:class:`lino_welfare.projects.eupen.modlib.pcsw.models.ClientDetail`:

>>> dtl = rt.modules.pcsw.Clients.detail_layout
>>> dtl  #doctest: +ELLIPSIS
<lino_welfare.modlib.pcsw.models.ClientDetail object at ...>
>>> dtl.__class__
<class 'lino_welfare.modlib.pcsw.models.ClientDetail'>

>>> lh = dtl.get_layout_handle(settings.SITE.kernel.default_ui)
>>> print(lh)
LayoutHandle for ClientDetail on pcsw.Clients

Let's get the `career` panel. It is a
:class:`lino.modlib.extjs.elems.Panel`:

>>> # career_panel = lh.main.find_by_name('career')
>>> career_panel = with_user_profile(ia_profile, lh.main.find_by_name, 'career')
>>> career_panel
<Panel career in ClientDetail on pcsw.Clients>
>>> career_panel.__class__
<class 'lino.modlib.extjs.elems.Panel'>

To see this panel, you need to be an integration agent:

>>> career_panel.required_roles
set([<class 'lino_welfare.modlib.integ.roles.IntegrationAgent'>])

Theresia is a reception clerk
(:class:`lino_welfare.modlib.welfare.roles.ReceptionClerk`):

>>> theresia = users.User.objects.get(username="theresia")
>>> theresia.profile.role.__class__
<class 'lino_welfare.modlib.welfare.roles.ReceptionClerk'>

And that's not the role required to view this panel:

>>> theresia.profile.has_required_roles(career_panel.required_roles)
False

And thus this panel is not visible for her:

>>> career_panel.get_view_permission(theresia.profile)
False

Note that the Panel objects which are not visible continue to be in
`lh.main.elements`:

>>> print(' '.join([e.name for e in lh.main.elements]))
... #doctest: +NORMALIZE_WHITESPACE
general contact coaching aids_tab work_tab_1 career languages 
competences contracts history calendar MovementsByProject misc debts

Lino filters them away only when generating the js files, py2js and
declare_vars:

>>> from lino.utils.jsgen import with_user_profile
>>> from lino.utils.jsgen import py2js, declare_vars
>>> def f():
...     print(py2js(lh.main.elements))
...     for ln in declare_vars(lh.main):
...         if ln.startswith("var career"):
...             print(ln)
>>> with_user_profile(theresia.profile, f)
... #doctest: +NORMALIZE_WHITESPACE
[ general_panel817, contact_panel843, coaching_panel1049, aids_tab_panel1143, work_tab_1_panel1172, history_panel1859 ]

.. before 20160530: [ general_panel795, contact_panel821, coaching_panel1027, aids_tab_panel1121, work_tab_1_panel1150, history_panel1837 ]

I can even render the :file:`lino*.js` files (at least once):

>>> class W:
...     def write(self, s):
...         if "career" in s: print(s)
>>> w = W()
>>> def f():
...     dd.plugins.extjs.renderer.write_lino_js(w)
>>> with_user_profile(theresia.profile, f)
... #doctest: +NORMALIZE_WHITESPACE

So until now everything looks okay. 

The problem was that until :blogref:`20150716`, when
:meth:`write_lino_js` had run once, then it left the requirements of
our career panel modified (loosened).  So the following was `False`
only after the first time and `True` all subsequent times:

>>> theresia.profile.has_required_roles(career_panel.required_roles)
False
>>> theresia.profile.has_required_roles(career_panel.required_roles)
False

