.. _welfare.tested.misc:

=============
Miscellaneous
=============

.. include:: /include/tested.rst

.. How to test only this document:

  $ python setup.py test -s tests.DocsTests.test_misc

>>> from __future__ import print_function
>>> import os
>>> os.environ['DJANGO_SETTINGS_MODULE'] = \
...    'lino_welfare.projects.std.settings.doctests'
>>> from lino.api.doctest import *

.. contents:: 
   :local:
   :depth: 3



Some database content
---------------------

>>> ses = rt.login('rolf')

.. 

    Rendering some more excerpts

    These are the excerpts generated by the demo fixtures:

    >> with translation.override('en'):
    ...     ses.show(excerpts.Excerpts, column_names="id excerpt_type owner")

    >> import shutil
    >> obj = excerpts.Excerpt.objects.get(pk=26)
    >> rv = ses.run(obj.do_print)
    >> print(rv['open_url'])
    .. #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE +REPORT_UDIFF
    /media/cache/appypdf/isip.Contract-1.pdf
    >> print(rv['success'])
    True

    The above `.pdf` file has been generated to a temporary cache
    directory of the developer's computer when this document had its last
    test run. The following lines the copied the file to the docs tree
    which is published together with the source code and thus publicly
    visible:

    >> tmppath = settings.SITE.project_dir + rv['open_url']
    >> shutil.copyfile(tmppath, 'isip.Contract-1.pdf')

    Link to this copy of the resulting file:
    :welfare_srcref:`/docs/tested/isip.Contract-1.pdf`

    Now the same in more generic. We write a formatter function and then
    call it on every excerpt. See the source code of this page if you want
    to see how we generated the following list:


Editing document template of an excerpt
=======================================

Here we want to see what the `edit_template` action says, especially
when called on an excerpt where Lino has two possible locations.

(Note: the following test is the reason why `is_local_project_dir` is
`True` in `lino_welfare.projects.std.settings.doctests`.)

>>> lcd = os.path.join(settings.SITE.project_dir, 'config')
>>> # rt.makedirs_if_missing(lcd)
>>> obj = excerpts.Excerpt.objects.get(pk=1)
>>> rv = ses.run(obj.edit_template)
>>> print(rv['info_message'])
...     #doctest: +NORMALIZE_WHITESPACE +ELLIPSIS
Gonna copy ...lino_welfare/config/excerpts/Default.odt to $(PRJ)/config/excerpts/Default.odt
>>> print(rv['message'])
...     #doctest: +NORMALIZE_WHITESPACE
Before you can edit this template we must create a local copy on the server. This will exclude the template from future updates.
Are you sure?


Yet another series of GET requests
==================================

>>> RetrieveTIGroupsRequest = rt.modules.cbss.RetrieveTIGroupsRequest
>>> ContentType = rt.modules.contenttypes.ContentType

>>> json_fields = 'count rows title success no_data_text'
>>> kw = dict(fmt='json', limit=10, start=0)
>>> demo_get('rolf', 'api/contacts/Companies', json_fields, 50, **kw)
>>> demo_get('rolf', 'api/households/Households', json_fields, 15, **kw)
>>> demo_get('rolf', 'api/contacts/Partners', json_fields, 173, **kw)

>>> demo_get('rolf', 'api/courses/CourseProviders', json_fields, 3, **kw)
>>> demo_get('rolf', 'api/courses/CourseOffers', json_fields, 4, **kw)
>>> demo_get('rolf', 'api/countries/Countries', json_fields, 9, **kw)
>>> demo_get('rolf', 'api/jobs/JobProviders', json_fields, 4, **kw)
>>> demo_get('rolf', 'api/jobs/Jobs', json_fields, 9, **kw)

>>> mt = ContentType.objects.get_for_model(RetrieveTIGroupsRequest).pk
>>> demo_get('rolf', 'api/cbss/RetrieveTIGroupsResult', 
...     json_fields, 18, mt=mt, mk=1, **kw)

>>> json_fields = 'count rows title success no_data_text param_values'
>>> demo_get('rolf', 'api/courses/PendingCourseRequests', json_fields, 19, **kw)
>>> demo_get('rolf', 'api/contacts/Persons', json_fields, 101, **kw)
>>> demo_get('rolf', 'api/pcsw/Clients', json_fields, 30, **kw)
>>> demo_get('rolf', 'api/debts/Clients', json_fields, 0, **kw)
>>> demo_get('rolf', 'api/cal/MyEvents', json_fields, 13, **kw)
>>> demo_get('rolf', 'api/newcomers/NewClients', json_fields, 23, **kw)
>>> demo_get(
...    'rolf', 'api/newcomers/AvailableCoachesByClient', json_fields,
...    2, mt=50, mk=120, **kw)
>>> demo_get('alicia', 'api/integ/Clients', json_fields, 7, **kw)
>>> demo_get('hubert', 'api/integ/Clients', json_fields, 19, **kw)

>>> alicia = settings.SITE.user_model.objects.get(username='alicia')

Rolf working as Alicia:

>>> kw = dict(fmt='json', limit=20, start=0, su=alicia.pk)
>>> demo_get('rolf', 'api/integ/Clients', json_fields, 7, **kw)

Some choices lists:

>>> kw = dict()
>>> fields = 'count rows'
>>> demo_get(
...     'rolf', 'choices/cv/SkillsByPerson/property', fields, 6, **kw)
>>> demo_get(
...    'rolf', 'choices/cv/ObstaclesByPerson/property', fields, 15, **kw)
>>> demo_get(
...    'rolf', 'choices/pcsw/ContactsByClient/company?type=1', fields, 4, **kw)

>>> demo_get(
...    'rolf', 'choices/aids/IncomeConfirmations/aid_type', fields, 11, **kw)

>>> demo_get(
...    'rolf', 'choices/aids/RefundConfirmations/aid_type', fields, 11, **kw)

>>> demo_get(
...    'rolf', 'apchoices/pcsw/Clients/create_visit/user', fields, 4, **kw)

>>> demo_get(
...    'robin', 'choices/countries/Countries/actual_country', fields, 8, **kw)

